****Difference between Reference Types and Value Types in C#****
Reference Types:	=> HEAP	
	1. Store the address of the object in memory.
	2. Examples include classes, arrays, delegates, and strings.
	3. When you assign a reference type variable to another, both variables point to the same memory location.
	4. Changes made through one variable will affect the other.
	5. Reference types are allocated on the ***************heap*******************.
	6. They can be null.
	7. They support inheritance and polymorphism.
	8. They are generally more flexible but can have performance overhead due to heap allocation and garbage collection.
	9. Memory management is handled by the garbage collector.
	10. Examples: class, interface, delegate, array, string.

// Value Types:		=> STACK
	1. Store the actual data directly in memory.
	2. Examples include primitive types (int, float, bool), structs, and enums.
	3. When you assign a value type variable to another, a copy of the data is made.
	4. Changes made to one variable do not affect the other.
	5. Value types are allocated on the ************************stack*********************** (or inline in containing types).
	6. They cannot be null (unless they are nullable types).
	7. They do not support inheritance (except for interfaces).
	8. They are generally faster and more efficient for small data structures.
	9. Memory management is straightforward as they are automatically cleaned up when they go out of scope.
	10. Examples: int, float, bool, struct, enum.

// Summary:
	Reference types are used for complex data structures and allow for shared access to the same object, while value types are used for simple data and provide independent copies of the data.

//Understanding the differences between reference and value types is crucial for effective memory management and performance optimization in C# programming.
	// Example Code:
	using System;
	class Program
	{
		static void Main()
		{
		// Value Type Example
		int a = 10;
		int b = a; // b is a copy of a
		b = 20; // Changing b does not affect a
		Console.WriteLine($"Value Types: a = {a}, b = {b}"); // Output: a = 10, b = 20
	}

// Reference Type Example
	Person person1 = new Person { Name = "Alice" };
	
	Person person2 = person1; // person2 references the same object as person1
	
	person2.Name = "Bob"; // Changing person2 affects person1
	
	Console.WriteLine($"Reference Types: person1.Name = {person1.Name}, person2.Name = {person2.Name}"); // Output: person1.Name = Bob, person2.Name = Bob

When to Use Value Types?	=>	Value types are advantageous in situations.		=> STACK
	The data is small and simple and does not need to be modified after it is created.
	The data needs to be accessed quickly and directly, without any indirection or overhead.
	The data needs to be isolated and independent and does not affect or depend on other data.

When to Use Reference Types?	=>	Reference types are advantageous in situations.		=> HEAP
	The data is large and complex and needs to be modified or expanded after it is created.
	The data needs to be shared and referenced and can affect or depend on other data.
	The data needs to be flexible and dynamic and can have different types and behaviors at runtime.

Best Practices		=>	Choosing between value types and reference types is an important decision that can affect the performance, functionality, and readability of the program. 
	Use value types(STACK) for simple and primitive data that do not need to be modified or shared, and use reference types(HEAP) for complex and dynamic data that need to be modified or shared.
	Use value types(STACK) when the data is small and can fit on the stack, and use reference types(HEAP) when the data is large and needs to be allocated on the heap.
	Use value types(STACK) when the data needs to be copied and isolated, and use reference types(HEAP) when the data needs to be referenced and shared.
	Use value types(STACK) when the data needs to be compared by value, and use reference types(HEAP) when the data needs to be compared by reference.
	Use value types(STACK) when the data needs to be immutable, and use reference types(HEAP) when the data needs to be mutable.

Conclusion
	Value types(STACK) are data types that directly store data in a fixed amount of memory on the stack, and are passed by value. 
	They are used for simple and primitive data that do not need to be modified or shared, and have advantages such as efficiency and predictability, 
	but also limitations such as size and copying cost.
	
	Reference types(HEAP) are data types that store references to data in a variable amount of memory on the heap, and are passed by reference. 
	They are used for complex and dynamic data that need to be modified or shared, and have advantages such as flexibility and dynamism, 
	but also challenges such as indirection and memory management.
	

The key differences between value types(STACK) and reference types(HEAP) are in their memory storage location, copying behavior, equality comparison, immutability vs. mutability, and common use cases.
	We should choose between value types and reference types based on the characteristics and requirements of the data, and follow some best practices for optimizing performance and memory management.